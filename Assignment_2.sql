--    ASSIGNMENT - 2
/* 1. Create a database named db_{yourfirstname} */

CREATE DATABASE db_Aarthi;

/* 2. Create Customer table with at least the following columns: (1/2 mark) 
      CustomerID INT NOT NULL ,FirstName Nvarchar(50 ) NOT NULL, LastName Nvarchar(50) NOT NULL */
USE db_Aarthi
GO
CREATE TABLE CUSTOMER (
CUSTOMERID  INT NOT NULL,
FIRSTNAME NVARCHAR(50 ) NOT NULL,
LASTNAME NVARCHAR(50) NOT NULL
PRIMARY KEY(CUSTOMERID))

/*  3. Create Orders table as follows: (1/2 mark)
       OrderID INT Not NULL,CustomerID INT NOT NULL,OrderDate datetime Not NULL  */
USE db_Aarthi
GO
CREATE TABLE ORDERS(
ORDERID INT NOT NULL,
CUSTOMERID INT NOT NULL,
ORDERDATE DATETIME NOT NULL
PRIMARY KEY (ORDERID))


--4. Use triggers to impose the following constraints (4 marks)
-- CUSTOM ERROR MSG FOR DELETE TRIGGER 
Use db_Aarthi
GO
EXEC SP_ADDMESSAGE @MSGNUM = 50001,@SEVERITY = 16,
     @MSGTEXT = 'CANNOT DELETE CUSTOMERS WHO PLACED ORDERS ATLEAST ONCE',
	 @LANG='US_ENGLISH';
GO
/* a)A Customer with Orders cannot be deleted from Customer table.- DDL trigger
b) Create a custom error and use Raiserror to notify when delete Customer with Orders fails. err msg */

USE DB_AARTHI
GO
CREATE TRIGGER DELETECUSTOMERCHECK
   ON  [DBO].[CUSTOMER] 
   INSTEAD OF DELETE
AS
BEGIN 
	SET NOCOUNT ON;
	DECLARE @COUNT INT;
	SELECT @COUNT=ORDERS.CUSTOMERID FROM [DBO].ORDERS JOIN DELETED ON 
	       ORDERS.CUSTOMERID = DELETED.CUSTOMERID
	IF (@COUNT IS NOT NULL)
	BEGIN 
		RAISERROR(50001,16,1);
	END
	ELSE
	BEGIN
		DELETE [DBO].CUSTOMER FROM [DBO].CUSTOMER JOIN DELETED ON 
		       CUSTOMER.CUSTOMERID = DELETED.CUSTOMERID
    END
END
GO

--INPUT TO CHECK DELETE TRIGGER--
USE [db_Aarthi]
GO
DELETE FROM [DBO].[CUSTOMER]
      WHERE CUSTOMERID=4;
GO


/* c)If CustomerID is updated in Customers, referencing rows in Orders must be updated accordingly. */
USE db_Aarthi
GO
CREATE TRIGGER CUSTOMERUPDATETRIGGER
   ON  [DBO].CUSTOMER
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;
	DECLARE @CURRENTORDER INT;
	DECLARE @DELCUSTID INT =null;
	SELECT @DELCUSTID = deleted.CustomerID FROM deleted
	IF (@DELCUSTID IS NOT null)
	BEGIN
		SELECT @CURRENTORDER=ORDERS.ORDERID FROM ORDERS JOIN DELETED ON 
			ORDERS.CUSTOMERID = DELETED.CUSTOMERID
		UPDATE [DBO].ORDERS SET ORDERS.CUSTOMERID = INSERTED.CUSTOMERID
			FROM INSERTED WHERE ORDERS.ORDERID = @CURRENTORDER
	END
END
GO
--INPUT TO CHECK UPDATE TRIGGER 
USE DB_AARTHI
GO
UPDATE [DBO].[CUSTOMER] SET CUSTOMERID=12
       WHERE CUSTOMERID=8;
GO

-- CUSTOM ERROR MESSAGE FOR UPDATE/INSERT TRIGGER
USE DB_AARTHI
GO
EXEC SP_ADDMESSAGE @MSGNUM = 50002,@SEVERITY = 16,
     @MSGTEXT = 'CANNOT MODIFY CUSTOMERID AS CORRESPONDING CUSTOMERID DOESNOT EXIST IN CUSTOMERS TABLE',
	 @LANG='US_ENGLISH';

GO
/* d)Updating and Insertion of rows in Orders table must verify that CustomerID 
   exists in Customer table, otherwise Raiserror to notify.  DML trigger */
USE DB_AARTHI
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER ModifyOrdertable
   ON  [dbo].Orders
   AFTER INSERT,UPDATE
AS 
BEGIN
	Declare @InsCustID INT;
    SELECT @InsCustID=inserted.CustomerID FROM inserted
	IF(@InsCustID IS NOT NULL)
	BEGIN
		Declare @CustID INT = null;
		SELECT @CustID = Customer.CustomerID FROM Customer 
			   WHERE Customer.CustomerID = @InsCustID
		IF (@CustID is null)
		BEGIN
			DELETE FROM Orders WHERE Orders.CustomerID = @InsCustID;
			Raiserror(50002,16,1);
		END
	END
END
GO
-- INSERT INPUT TO CHECK AFTER TRIGGER --
USE [db_Aarthi]
GO
SET NOCOUNT ON;
INSERT INTO [dbo].[Orders] VALUES --(130,12,'2019-04-30'),
       (131,10,'2019-11-19')
--UPDATE INPUT TO CHECK AFTER TRIGGER --
UPDATE Orders SET CustomerID = 3 WHERE OrderID =100
GO
/* 5. Create a scalar function named fn_CheckName(@FirstName, @LastName) to check that 
the FirstName and LastName are not the same. (2 marks) */

USE DB_AARTHI
GO
CREATE FUNCTION [DBO].FN_CHECKNAME(@FIRSTNAME AS VARCHAR(50),@LASTNAME AS VARCHAR(50))
RETURNS VARCHAR(35)
AS
BEGIN
  DECLARE @NAMEFLAG BIT
  IF (@FIRSTNAME = @LASTNAME)
  BEGIN
    SELECT @NAMEFLAG = 0 -- NAMES ARE SAME
  END
  ELSE
  BEGIN
   SELECT @NAMEFLAG = 1 -- NAMES ARE DIFFERENT
  END
  RETURN @NAMEFLAG
END
GO

-- INPUT TO CHECK SCALAR FUNCTION 
SELECT [DBO].FN_CHECKNAME('David','DAVID');
SELECT [DBO].FN_CHECKNAME('JACK','ISSAC');

--CUSTOM ERROR MESSAGE FOR INSERT CUSTOMER STORED PROCEDURE
USE DB_AARTHI
GO
EXEC SP_ADDMESSAGE @MSGNUM = 50003,@SEVERITY = 16,
     @MSGTEXT = 'FIRST AND LAST NAMES ARE SAME,CANNOT INSERT RECORD',
	 @LANG='US_ENGLISH';
GO
/*6. Create a stored procedure called sp_InsertCustomer that would take Firstname
  and Lastname and optional CustomerID as parameters and Insert into Customer table. */
USE DB_AARTHI
GO
CREATE PROCEDURE SP_INSERTCUSTOMER
  @F_NAME VARCHAR(50),@L_NAME VARCHAR(50),@CUST_ID INT = 0
AS
BEGIN
DECLARE @NAMEFLAG BIT;
SELECT @NAMEFLAG = [DBO].FN_CHECKNAME(@F_NAME,@L_NAME);
  IF (@CUST_ID = 0)
  BEGIN
   SELECT @CUST_ID = MAX(CUSTOMER.CUSTOMERID) FROM CUSTOMER
   SELECT @CUST_ID = @CUST_ID + 1;
  END
  IF (@NAMEFLAG = 1)
    INSERT INTO [DBO].CUSTOMER (CUSTOMERID,FIRSTNAME,LASTNAME) VALUES(@CUST_ID,@F_NAME,@L_NAME)
  ELSE
     RAISERROR(50003,16,1)
END
GO
--INPUT TO CHECK INSERT CUSTOMER STORED PROCEDURE
EXEC sp_InsertCustomer 'Kevin','Barrie'
EXEC sp_InsertCustomer 'Luke','Luke'

-- CREATE CUSTOMER AUDIT TABLE TO BE USED FOR QUESTION 7 
Use db_Aarthi
GO
CREATE TABLE CUSAUDIT(
ID INT IDENTITY(1,1),
OLD_CUSTID INT,
NEW_CUSTID INT,
OLD_FNAME VARCHAR(50),
NEW_FNAME VARCHAR(50),
OLD_LNAME VARCHAR(50),
NEW_LNAME VARCHAR(50),
DATE_TIME DATETIME2,
LOGIN_NAME VARCHAR(20)
PRIMARY KEY(ID))


/* 7. Log all updates to Customer table to CusAudit table. 
  Indicate the previous and new values of data, the date and time and 
 the login name of the person who made the changes. (4 marks) */
USE DB_AARTHI
GO
CREATE TRIGGER CUSTOMERAUDIT ON [DBO].CUSTOMER
FOR UPDATE
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @CURRENTUSER VARCHAR(30),
	        @ID_OLD INT,@ID_NEW INT,
			@FN_BEFOREUPDATE VARCHAR(50),@FN_AFTERUPDATE VARCHAR(50),
	        @LN_BEFOREUPDATE VARCHAR(50),@LN_AFTERUPDATE VARCHAR(50)
	SELECT @CURRENTUSER = CURRENT_USER
	SELECT @ID_OLD = DELETED.CUSTOMERID,@FN_BEFOREUPDATE = DELETED.FIRSTNAME,@LN_BEFOREUPDATE=DELETED.LASTNAME FROM DELETED
	SELECT @ID_NEW = INSERTED.CUSTOMERID,@FN_AFTERUPDATE = INSERTED.FIRSTNAME,@LN_AFTERUPDATE=INSERTED.LASTNAME FROM INSERTED
 
	INSERT [DBO].[CUSAUDIT] ([OLD_CUSTID],[NEW_CUSTID],[OLD_FNAME],[NEW_FNAME],[OLD_LNAME],[NEW_LNAME],[DATE_TIME],[LOGIN_NAME])
	VALUES (@ID_OLD,@ID_NEW,@FN_BEFOREUPDATE,@FN_AFTERUPDATE,@LN_BEFOREUPDATE,@LN_AFTERUPDATE,GETDATE(),@CURRENTUSER)
END
GO
-- INPUT TO CHECK AUDIT TRIGGER
UPDATE [dbo].[Customer] SET Customer.FirstName ='Kelly' WHERE CustomerID =13